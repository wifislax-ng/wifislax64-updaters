#!/bin/bash

# Script by USUARIONUEVO @ www.seguridadwireless.net

# Eliminamos posibles ficheros viejos de modificaciones de scripts	
rm -rf /opt/wifislax-updaters/*/*~ &>/dev/null

SCRIPT_VERSION=20250407

# Variables globales
# El PRGNAM2 se usa en la creacion del xzm ,NO BORRAR
# KARCH se usara siempre x86 ya que especifica arcquitectura "PC"
ARCH=$(uname -m)
VMLINUZ="vmlinuz"
PRGNAM2=kernel
PRGNAM=linux
KARCH=x86
SCRIPTNAME=linux_updater
TAG=wifislax
WIFISLAX=$(cat /etc/wifislax-version|cut -d ' ' -f2|cut -d_ -f1)
ESCRITORIO=$(cat '/root/.config/user-dirs.dirs' |grep DESKTOP|cut -d '"' -f2|cut -d/ -f2)
M0DNUM=000
MODNAM=Kernel
BUILD=1
KERNEL_SISTEMA=$(uname -r|cut -d '-' -f1|tr -d " \t\n\r")
RAMA_SISTEMA=$(uname -r|cut -d '-' -f1|cut -d "." -f-2|tr -d " \t\n\r")
WEB=https://www.kernel.org

export MAKEFLAGS=-j$(nproc)

echo -e "\033]2;${PRGNAM}_updater\007"

# Bienvenida
clear
echo -e "\n$ROSA
      __ __                 __  _____                _ __       
     / // /__ _______  ___ / / / ___/__  __ _  ___  (_) /__ ____
    / ,< / -_) __/ _ \/ -_) / / /__/ _ \/  ' \/ _ \/ / / -_) __/
   /_/|_|\__/_/ /_//_/\__/_/  \___/\___/_/_/_/ .__/_/_/\__/_/   
                                            /_/                  \n"
                                       
echo -e "\n${AMARILLO}   ##### By USUARIONUEVO @ www.seguridadwireless.net ##### ${RESET}"


# Sin internet el script no continua.
if [ ! "$(ping google.com -c1 2>/dev/null)" ]; then
echo "$ROJO"No tengo internet"${RESET} ... $BLANCO"el script se cerrara...${RESET}"
echo ""
sleep 1
exit 0
fi

# Comprobar updates para el script
SERVIDOR_WEB="https://raw.githubusercontent.com/wifislax-ng/wifislax64-updaters/master/$WIFISLAX"
DIRECTORIO=$(find /opt/wifislax-updaters -type f -name ${SCRIPTNAME} | rev | cut -d/ -f2- | rev | head -1)
SERVIDOR_VERSION=$(timeout -s SIGTERM 3 curl -s $SERVIDOR_WEB/${DIRECTORIO##*/}/${SCRIPTNAME} | grep "SCRIPT_VERSION=" | head -1 |cut -d "=" -f2)


echo ${CYAN}Version Script${RESET}: $ROJO${SCRIPT_VERSION:6}$BLANCO/${AMARILLO}${SCRIPT_VERSION:4:2}$BLANCO/$ROJO${SCRIPT_VERSION:0:4}${RESET}

if [ "$(ping github.com -c1 2>/dev/null)" ]; then
if [[ $SCRIPT_VERSION -lt $SERVIDOR_VERSION ]]; then
echo
echo "$ROSAComprobando si hay actualizaciones para el script..."${RESET}."
echo ${ROJO}NUEVA VERSION${RESET}
echo 
echo ${ROSA}Version Server${RESET}: $ROJO${SERVIDOR_VERSION:6}$BLANCO/${AMARILLO}${SERVIDOR_VERSION:4:2}$BLANCO/$ROJO${SERVIDOR_VERSION:0:4}${RESET}
echo
echo ${CYAN}Actualizando ${SCRIPTNAME}
curl -s $SERVIDOR_WEB/${DIRECTORIO##*/}/${SCRIPTNAME} -o $DIRECTORIO/${SCRIPTNAME}
echo ${ROJO}LISTO${RESET}
sleep 1
$0
exit
fi
fi

# Aseguramos la existencia del directorio de compilacion y si no existe se crea
if [ ! -d /usr/src ]; then
mkdir -p /usr/src
fi

# Menu de opciones
echo ""
PS3='Selecciona una opcion: '
OPCIONES=("${{VERDE}}Seguir rama del sistema ${{AMARILLO}}(recomendado)${{RESET}}" "${{VERDE}}Ultimo disponible como estable${{RESET}}" "${{VERDE}}Elegir uno custom${{RESET}}" "${{VERDE}}El ultimo disponible rcX${{RESET}}")
select OPT in "${OPCIONES[@]}"
do
    case $OPT in
        "${{VERDE}}Seguir rama del sistema ${{AMARILLO}}(recomendado)${{RESET}}")
            RAMA=$(echo $(uname -r|cut -d . -f-2))
            KERNEL_ELEGIDO=$(curl -s $WEB/|grep linux-$RAMA.*|head -1 |cut -d 'x' -f 4|cut -d '-' -f 2|cut -d " " -f 2|cut -d "t" -f1|sed 's/.$//g')
            RAMA_ELEGIDO=$(echo $KERNEL_ELEGIDO |cut -d "." -f-2 |sed 's/ //g')
            FAMILIA=$(echo $KERNEL_ELEGIDO|cut -d. -f1)
            DESCARGA=https://cdn.kernel.org/pub/linux/kernel/v$FAMILIA.x/linux-$KERNEL_ELEGIDO.tar.xz
                     
            break;;
        "${{VERDE}}Ultimo disponible como estable${{RESET}}")
            KERNEL_ELEGIDO=$(curl -s $WEB/|grep .tar.xz|head -1|cut -d "-" -f2|cut -d "t" -f-1|sed "s/.$//g")
            RAMA_ELEGIDO=$(echo $KERNEL_ELEGIDO|cut -d "." -f-2|sed 's/ //g')
            FAMILIA=$(echo $KERNEL_ELEGIDO|cut -d. -f1)
            DESCARGA=https://cdn.kernel.org/pub/linux/kernel/v$FAMILIA.x/linux-$KERNEL_ELEGIDO.tar.xz
            break;;
        "${{VERDE}}Elegir uno custom${{RESET}}")
            CUSTOM="TRUE"
            break;;
        "${{VERDE}}El ultimo disponible rcX${{RESET}}")
            KERNEL_ELEGIDO=$(curl -s $WEB/|grep rc[0-9]|tail -1|cut -d v -f3|cut -d '"' -f-1)
            RAMA_ELEGIDO=$(echo $KERNEL_ELEGIDO|cut -d "-" -f-1|sed 's/ //g')
            FAMILIA=$(echo $KERNEL_ELEGIDO|cut -d. -f1)
            DESCARGA=https://git.kernel.org/torvalds/t/linux-$KERNEL_ELEGIDO.tar.gz
            break;;
        *)  echo opcion invalida;;
    esac
done

if [ ! -z $CUSTOM ]; then
# Numero de Kernel completo que queremos compilar
echo "${VERDE}"
echo "Escribe el numero de kernel exacto que te gustaria compilar y pulsa ${BLANCO}ENTER"
echo "$ROSA"
read KERNEL_ELEGIDO
RAMA_ELEGIDO=$(echo $KERNEL_ELEGIDO|cut -d "." -f-2|sed 's/ //g')
FAMILIA=$(echo $KERNEL_ELEGIDO|cut -d. -f1)
DESCARGA=https://cdn.kernel.org/pub/linux/kernel/v$FAMILIA.x/linux-$KERNEL_ELEGIDO.tar.xz
echo ${RESET}"
fi

# Entramos a la ruta de trabajo
cd /usr/src/

# Si el paquete no existe se descargara de internet
if [ ! -f linux-$KERNEL_ELEGIDO.tar.* ]; then
echo ""
echo "$CYAN"Descargando sources de $PRGNAM-$KERNEL_ELEGIDO ${RESET}"
sleep 1
echo $ROSA
wget -N -L -c -q --show-progress $DESCARGA
echo ${RESET}
fi

# Si existen restos de una prueba anterior seeliminaran
rm -rf /usr/src/$PRGNAM-$KERNEL_ELEGIDO &>/dev/null

# Descomprimir fichero
echo ""
echo "${VERDE}"Descomprimiendo ...${RESET}"
sleep 1
tar xvf $PRGNAM-$KERNEL_ELEGIDO.tar.xz||tar xvf $PRGNAM-$KERNEL_ELEGIDO.tar.gz

# Entrar a la ruta del kernel descomprimido
cd $PRGNAM-$KERNEL_ELEGIDO
# Se limpia por si los de kernel.org se dejaron algun fichero que no es de kernel
make mrproper

###################################
### Generamos parche wireless  ####
###################################
# Si la rama es menor a 6.2 se aplicara el parche
# Se quitan los puntos para convertir el numero a entero
# y poder manejarlo mejor.
if [ $(echo $RAMA_ELEGIDO|sed 's/\.//g') -lt 62 ] ; then
PARCHE=Negative-channel-multi.patch
cat > $PARCHE << "EOF"
--- a/net/wireless/chan.c	2013-08-29 18:47:51.000000000 +0200
+++ b/net/wireless/chan.c	2013-08-31 22:20:45.014734447 +0200
@@ -441,4 +441,2 @@
 		return -EOPNOTSUPP;
-	if (!cfg80211_has_monitors_only(rdev))
-		return -EBUSY;

--- a/net/mac80211/cfg.c	Tue May 28 16:57:23 2013 -0400
+++ b/net/mac80211/cfg.c	Tue May 28 17:16:15 2013 -0400
@@ -801,3 +801,4 @@
 		}
-	} else if (local->open_count == local->monitors) {
+	// Patch: Always allow channel change, even if a normal virtual interface is present
+	} else /*if (local->open_count == local->monitors)*/ {
 		local->_oper_channel = chandef->chan;


--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -3588,9 +3589,9 @@ static int ieee80211_cfg_get_channel
 	if (chanctx_conf) {
 		*chandef = chanctx_conf->def;
 		ret = 0;
-	} else if (local->open_count > 0 &&
+	} else /*if (local->open_count > 0 &&
 		   local->open_count == local->monitors &&
-		   sdata->vif.type == NL80211_IFTYPE_MONITOR) {
+		   sdata->vif.type == NL80211_IFTYPE_MONITOR)*/ {
 		if (local->use_chanctx)
 			*chandef = local->monitor_chandef;
 		else

EOF

# Aplicamos parche si hay error se parara el proceso ( exit 1 )
echo ""
echo ""${VERDE}"Aplicando parche wireless para channel -1 "$BLANCO"...${RESET}""
sleep 1
patch -f -p1 < $PARCHE||exit 1
fi

# Ponemos nuestro logo
LOGO=/usr/share/pixmaps/wifislax_logo_blue.png
LOGONEW=/usr/src/$PRGNAM-$KERNEL_ELEGIDO/drivers/video/logo/logo_linux_clut224.ppm
if [ -f $LOGO ]; then
echo ""
echo ""${VERDE}Convirtiendo logo ..."$BLANCO"...${RESET}""
sleep 1
pngtopnm $LOGO|ppmquant 224|pnmtoplainpnm > $LOGONEW||exit 1
echo ""
fi

# Parte1 avisamos por si quieres poner un config
if [ ! -f /usr/src/$PRGNAM-$KERNEL_ELEGIDO/.config ]; then
echo ""
echo ""$CYAN"No se detecto fichero config ...${RESET}""
echo ""
echo ""$CYAN"Si quieres añadir uno hazlo en /usr/src/$PRGNAM-$KERNEL_ELEGIDO/.config ...${RESET}""
echo ""$CYAN"Si no añades un config se usara la config del kernel actual.${RESET}""
echo ""
echo ""$CYANCuando pulses "${AMARILLO}"ENTER "$CYAN"el proceso continuara${RESET}""
echo ""
read junk
fi

# Parte2 sino hay config generamos una en base al kernel actual
if [ -f /usr/src/$PRGNAM-$KERNEL_ELEGIDO/.config ]; then
echo ""
echo ""${VERDE}"Usando config añadida por el usuario ...${RESET}""
echo ""
else
echo ""
echo ""${VERDE}"Generamos fichero .config ...${RESET}""
echo ""
modprobe configs && zcat /proc/config.gz > /usr/src/$PRGNAM-$KERNEL_ELEGIDO/.config
fi

# Compilamos el kernel
make olddefconfig || exit 1
make xconfig || exit 1

# Variables para calcular tiempo de inicio
COMIENZO=$(date +%s)

# Comienza la compilacion del kernel
make all || exit 1

# Creamos la ruta de destino a instalar el kernel
# Cuando es un kernel rc suele aparecer solo la rama
# Grepeamos aqui la version completa del kernel en el fichero .config
KERNEL_VERSION=$(grep $(echo $KERNEL_ELEGIDO|cut -d- -f-1) .config|head -1|cut -d ' ' -f3)
CONTAINER=$HOME/$ESCRITORIO/$MODNAM-$KERNEL_VERSION-$ARCH-$BUILD$TAG
mkdir -p $CONTAINER
ZSTD_CLEVEL=19 make modules_install INSTALL_MOD_STRIP=1 INSTALL_MOD_PATH=$CONTAINER || exit 1

# Instalamos las cabeceras kernel-headers
make INSTALL_HDR_PATH=$CONTAINER/usr headers_install || exit 1

# Copiamos el vmlinuz (este con nombre generico para el modo live)
cp /usr/src/$PRGNAM-$KERNEL_ELEGIDO/arch/$KARCH/boot/bzImage $HOME/$ESCRITORIO/$VMLINUZ &>/dev/null

# Generamos kernel sources recortadas
mv System.map ../
make clean
mv ../System.map .
make prepare
make scripts
rm -Rf Documentation drivers fs net sound firmware
ls -1d arch/*|grep -v $KARCH|xargs rm -Rf
ls -1d include/*|grep asm- |grep -v $KARCH|grep -v generic|xargs rm -Rf
cp include/generated/* include/linux &>/dev/null

# Preparamos creacion de xzm
VMLINUZNAME=$(grep  CONFIG_LOCALVERSION=" .config|cut -d = -f2|sed 's/"//g')
mkdir -p $CONTAINER/usr/src
cp -r /usr/src/$PRGNAM-$KERNEL_ELEGIDO $CONTAINER/usr/src

# Realizamos limpieza
RUTA_LIMPIEZA=$CONTAINER/usr/src/$PRGNAM-$KERNEL_ELEGIDO
FILES_BORRAR="kernel.txt Negative-channel-multi.patch ralink.patch .config.old"
for X in $FILES_BORRAR; do
rm $RUTA_LIMPIEZA/$X &>/dev/null
done

# Creamos xzm de kernel + sources
dir2xzm $CONTAINER $CONTAINER.xzm -n
mv $CONTAINER.xzm $HOME/$ESCRITORIO/$M0DNUM-$MODNAM-$KERNEL_VERSION-$ARCH-$BUILD$TAG.xzm

# Finalizamos
rm -Rf $CONTAINER
AHORA=$(($(date +%s)-3600));
TIEMPO="$(date --date=@$(($AHORA-$COMIENZO)) +%X)"
echo ""
echo "${{AMARILLO}}Tiempo empleado${BLANCO}: $TIEMPO"
echo ""
# Si no es wifislax ya hemos acabado aqui.
if [ ! -f /etc/wifislax-version ]; then
echo ""
echo ""${AMARILLO}"Bye Bye${RESET}""
exit 0
fi
# En modo live es absurdo ofrecer instarlo
if [ -d /mnt/live ]; then
echo ""
echo ""${AMARILLO}"Bye Bye${RESET}""
exit 0
fi
# Si se trata de wifislax en HDD puedo instalar el kernel.
echo ""${AMARILLO}"Pulsa ENTER si quieres instalar el kernel,si no te interesa cierra el scipt.${RESET}""
read junk
echo ""
echo ""${VERDE}"Instalando Kernel $KERNEL_VERSION en sistema ...${RESET}""
xzm2dir $HOME/$ESCRITORIO/$M0DNUM-$MODNAM-$KERNEL_VERSION-$ARCH-$BUILD$TAG.xzm /
cp -r $HOME/$ESCRITORIO/$VMLINUZ /boot/vmlinuz-${KERNEL_VERSION}${VMLINUZNAME}
update-grub
echo ""
echo ""$CYAN"Instalacion completada ...${RESET}""
echo ""
echo ""${AMARILLO}"Bye Bye${RESET}""
