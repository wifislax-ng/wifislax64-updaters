#!/bin/bash

# Script by www.seguridadwireless.net

SCRIPT_VERSION=20250123

############################################################
## Funciones comunes. Su nombre empieza por f_ ##
############################################################
f_variables(){
	. /opt/wifislax-updaters/Funciones/funciones_updater
}

############################################################
## Funciones propias del script. Su nombre empieza por F_ ##
############################################################
# Definicion de variables
F_variables() {
	PRGNAM=firmwares
	SRCNAM=linux-firmware
	GESTOR=git
	echo -ne "\033]2;${PRGNAM}_updater\007"
	WEB=https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
	VERSION=$(lynx -dump -width=256 $WEB/commit/?id=HEAD | grep "   committer " | head -n 1 | rev | cut -f 3 -d ' ' | rev | tr -d -)
	SOURCES=$PRGNAM
	CD=$SRCNAM
	DOWNLOAD=$WEB
}

# Creamos directorios , eliminamos sobrantes .git y movemos
F_compilar(){
echo "$VERDE"Compilando ..."$CIERRE"
ZSTD_CLEVEL=19 make DESTDIR=$PKG FIRMWAREDIR=/lib/firmware install-zst
# Vamos a ahorrar espacio
rm -rf $PKG/lib/firmware/{bnx2x,libertas,liquidio,mellanox,netronome,qcom,qed,qlogic}
rm -rf $PKG/lib/firmware/{a300_*,bnx2x*,cbfw*,ct2fw*,ctfw*,ql2*,ti-connectivity,vpu*.bin*}
# Incluimos AMD microcodiigo
  mkdir -p $PKG/boot/tmp
  pushd $PKG/boot/tmp
    mkdir -p kernel/x86/microcode
    find $PKG/lib/firmware/amd-ucode -type f -name "*.bin" | sort | xargs cat > kernel/x86/microcode/AuthenticAMD.bin
    find . | cpio --no-absolute-filenames -H newc -o -F $PKG/boot/amd-ucode.img
  popd
  rm -rf $PKG/boot/tmp
}

###################################
## BLOQUE PRINCIPAL DE EJECUCION ##
###################################
# Si se cierra el script inesperadamente, ejecutar la funcion de limpieza
trap f_exitmode SIGHUP SIGINT

#Inicializamos las variables globales
f_variables
#Comprobamos conexion a Internet
f_comprobarConexion
#Inicializamos las variables del script
F_variables
#Creamos directorio de trabajo
f_directorioTemporal
#Mostramos el mensaje de presentacion
f_presentacion
#Comprobamos updates del script
f_comprobarUpdates
#Asignamos o detectamos arquitectura
f_arquitectura noarch
#Comprobamos version instalada del script
f_versionInstalada
#Descarga los firmwares mas nuevos disponibles
f_download
#Cd a ruta
f_cd
#Descomprimir fichero descargado y compilamos
F_compilar
#Creamos xzm , instalamos y salimos
f_tareasFinales