#!/bin/bash

SCRIPTVERSION=1.3

# v1.2 Se aÃ±ade funcion timeout
# v1.1 Se aÃ±ade mensaje si todos los upadters funcionan

clear

# Algunos updaters necesitan arquitectura para saber version
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

export ARCH
export LIBDIRSUFFIX

# Colores
CIERRE=${CIERRE:-"[0m"}
ROJO=${ROJO:-"[1;31m"}
VERDE=${VERDE:-"[1;32m"}
CYAN=${CYAN:-"[1;36m"}
AMARILLO=${AMARILLO:-"[1;33m"}
BLANCO=${BLANCO:-"[1;37m"}
ROSA=${ROSA:-"[1;35m"}

echo "#############################"
echo "###  $CYAN TESTER DE UPDATERS $CIERRE ###"
echo "#############################"


if [ ! "$(ping google.com -c1 2>/dev/null)" ]; then
echo ""
echo "No tengo internet ... el script se cerrara."
echo ""
sleep 1
exit 0
fi

BUSQUEDA(){
TMP=/tmp/Updaters_Test
if [ -d $TMP ]; then
rm -rf $TMP
fi
mkdir -p $TMP
cd /opt/wifislax-updaters
UPDATERS=$(find . -type f -name "*_updater")
echo 
echo "${BLANCO}[${VERDE}*${BLANCO}]$AMARILLO Copiando updaters a directorio temporal ..."
cp -rf $UPDATERS $TMP &>/dev/null
rm -rf $TMP/linux* &>/dev/null
rm -rf $TMP/funciones_updater &>/dev/null
rm -rf $TMP/wifislax-updaters_updater &>/dev/null
rm -rf $TMP/last_update &>/dev/null
rm -rf $TMP/firefox_multi_updater &>/dev/null
}

TEMPORAL(){
cd $TMP
TEMPUPDATERS=$(find . -type f -name "*_updater"|sort)
echo "${BLANCO}[${VERDE}*${BLANCO}]$AMARILLO Modificando copias temporales de updaters ..."
for UPDATER in $TEMPUPDATERS; do
LINEA=$(grep -r "f_exitmode" -n $UPDATER|tr -d [a-zA-Z#_.:/])
FINAL=$(cat $UPDATER|wc -l)
ELIMINAR=$(expr $FINAL + 1)
sed -i "${LINEA},${ELIMINAR}d" $UPDATER
#echo f_variables >> $UPDATER
echo F_variables >> $UPDATER
echo 'if [ -z $VERSION ]; then' >> $UPDATER
echo 'VERSION="[1;31mFallido [0m"' >> $UPDATER
echo 'echo "$PRGNAM" >> "./FALLIDOS"' >> $UPDATER
echo 'fi' >> $UPDATER
echo 'printf "%-52s [1;37mVersion:[1;32m${VERSION}[0m\n" "[1;37mPrograma:[1;36m${PRGNAM}"' >> $UPDATER
done
}

MOSTRAR(){
echo "${BLANCO}[${VERDE}*${BLANCO}]$AMARILLO Testeando updaters..."
echo
sleep 3
for UPDATER in $TEMPUPDATERS ; do
timeout -s SIGTERM 5 sh -c "$TMP/$UPDATER"||printf "%-52s [1;37mVersion:[1;31mTIMEOUT[0m\n" "[1;37mPrograma:[1;36m$(echo $UPDATER|cut -d / -f2|sed 's/_updater//g')"
done
}

INFORME(){
clear
echo 
echo "#############################"
echo "###  $ROJO INFORME DE ERRORES $CIERRE ###"
echo "#############################"
echo 
if [ -f $TMP/FALLIDOS ]; then
echo "${BLANCO}[${VERDE}*${BLANCO}] Los siguientes updaters fallaron"
echo $BLANCO
cat $TMP/FALLIDOS
echo $CIERRE
else 
echo "${BLANCO}[${VERDE}*${BLANCO}] ${VERDE}!!! Enhorabuena !!!"
echo "${BLANCO}[${VERDE}*${BLANCO}] Todos los upadters funcionan."
fi
}

LIMPIAR(){
echo "${BLANCO}[${VERDE}*${BLANCO}] Limpiando directorio temporal ..."
sleep 1
rm -rf $TMP
echo "${BLANCO}[${VERDE}*${BLANCO}] Bye Bye"
echo $CIERRE
}

BUSQUEDA
TEMPORAL
MOSTRAR
INFORME
LIMPIAR